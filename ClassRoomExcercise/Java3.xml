<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="Java3.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

 <package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>spark</name><operator>.</operator><name>util</name></name>;</package>

 <import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
 <import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
 
 <comment type="block" format="javadoc">/**
  * A mutable class loader that gives preference to its own URLs over the parent class loader
  * when loading classes and resources.
  */</comment>
 <class><specifier>public</specifier> class <name>ChildFirstURLClassLoader</name> <super_list><extends>extends <super><name>MutableURLClassLoader</name></super></extends></super_list> <block>{
 
   <static>static <block>{<block_content>
     <expr_stmt><expr><call><name><name>ClassLoader</name><operator>.</operator><name>registerAsParallelCapable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></static>
 
   <decl_stmt><decl><type><specifier>private</specifier> <name>ParentClassLoader</name></type> <name>parent</name></decl>;</decl_stmt>
 
   <constructor><specifier>public</specifier> <name>ChildFirstURLClassLoader</name><parameter_list>(<parameter><decl><type><name><name>URL</name><index>[]</index></name></type> <name>urls</name></decl></parameter>, <parameter><decl><type><name>ClassLoader</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>urls</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <operator>new</operator> <call><name>ParentClassLoader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <comment type="block" format="javadoc">/**
    * Specify the grandparent if there is a need to load in the order of
    * `grandparent -&amp;gt; urls (child) -&amp;gt; parent`.
    */</comment>
   <constructor><specifier>public</specifier> <name>ChildFirstURLClassLoader</name><parameter_list>(<parameter><decl><type><name><name>URL</name><index>[]</index></name></type> <name>urls</name></decl></parameter>, <parameter><decl><type><name>ClassLoader</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>ClassLoader</name></type> <name>grandparent</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>urls</name></expr></argument>, <argument><expr><name>grandparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <operator>new</operator> <call><name>ParentClassLoader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></constructor>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>loadClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>resolve</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
     <try>try <block>{<block_content>
       <return>return <expr><call><name><name>super</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>resolve</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>cnf</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <return>return <expr><call><name><name>parent</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>resolve</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></catch></try>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>getResources</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
     <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>urls</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>super</name><operator>.</operator><name>getResources</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name><name>urls</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getResources</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>enumeration</name></name><argument_list>(<argument><expr><name>urls</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
 
   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>URL</name></type> <name>getResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>url</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
       <return>return <expr><name>url</name></expr>;</return>
     </block_content>}</block></if> <else>else <block>{<block_content>
       <return>return <expr><call><name><name>parent</name><operator>.</operator><name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></else></if_stmt>
   </block_content>}</block></function>
 }</block></class></unit>
